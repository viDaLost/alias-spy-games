let aliasWords = [];        // –°–ª–æ–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
let aliasIndex = 0;         // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
let guessedAlias = [];      // –í—Å–µ —É–≥–∞–¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ —É–≥–∞–¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: { word, correct, round }
let currentDifficulty = null;
let currentRound = 1;       // –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞

function startAliasGame() {
  // –°–±—Ä–æ—Å –∏–≥—Ä—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  aliasWords = [];
  aliasIndex = 0;
  guessedAlias = [];
  currentRound = 1;

  const container = document.getElementById("game-container");

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  container.innerHTML = `
    <h2>üéÆ –ê–ª–∏–∞—Å</h2>
    <p><strong>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:</strong></p>

    <div style="margin-bottom:15px;">
      <button onclick="loadAliasWords('easy')" class="menu-button">üü¢ –õ—ë–≥–∫–∏–π</button><br>
      <button onclick="loadAliasWords('medium')" class="menu-button">üü° –°—Ä–µ–¥–Ω–∏–π</button><br>
      <button onclick="loadAliasWords('hard')" class="menu-button">üî¥ –¢—è–∂—ë–ª—ã–π</button><br>
    </div>

    <button onclick="goToMainMenu()" class="back-button">‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
  `;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤ –∏–∑ JSON –ø–æ —É—Ä–æ–≤–Ω—é
async function loadAliasWords(difficulty) {
  let url = "";

  if (difficulty === "easy") {
    url = "data/easy_bible_words.json";
  } else if (difficulty === "medium") {
    url = "data/medium_bible_words.json";
  } else if (difficulty === "hard") {
    url = "data/hard_bible_words.json";
  }

  try {
    const words = await loadJSON(url);
    currentDifficulty = difficulty;
    showAliasSetup(words, difficulty);
  } catch (e) {
    alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤: ${e.message}`);
    console.error(e);
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –∏ –≤—Ä–µ–º–µ–Ω–∏
function showAliasSetup(words, difficulty) {
  const container = document.getElementById("game-container");
  const difficultyName = getDifficultyName(difficulty);

  container.innerHTML = `
    <h2>üéÆ –ê–ª–∏–∞—Å ‚Äî ${difficultyName} —É—Ä–æ–≤–µ–Ω—å</h2>
    <p><strong>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è (1‚Äì60 —Å–µ–∫—É–Ω–¥):</strong></p>
    <input type="number" id="timerValue" min="1" max="60" value="60" class="timer-input">

    <br><br>
    <button onclick="startAliasTimer('${difficulty}')" class="start-button">‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É</button>
    <button onclick="goToMainMenu()" class="back-button">‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
  `;
}

// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è
function getDifficultyName(difficulty) {
  return {
    easy: "–õ—ë–≥–∫–∏–π",
    medium: "–°—Ä–µ–¥–Ω–∏–π",
    hard: "–¢—è–∂—ë–ª—ã–π"
  }[difficulty] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ —É–≥–∞–¥–∞–Ω—ã
function getUnusedWords(allWords, guessedList) {
  const guessedWords = new Set(guessedList.map(item => item.word));
  return allWords.filter(word => !guessedWords.has(word));
}

// –°–±—Ä–æ—Å –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∏–≥—Ä–æ–π, –Ω–æ –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ
async function startAliasGameWithReset(difficulty) {
  aliasIndex = 0;
  aliasWords = [];

  try {
    const words = await loadJSON(urlForDifficulty(difficulty));
    const unusedWords = getUnusedWords(words, guessedAlias);

    if (unusedWords.length === 0) {
      showAllWordsShownMessage();
      return;
    }

    aliasWords = shuffleArray([...unusedWords]);
    aliasIndex = 0;

    const container = document.getElementById("game-container");
    container.innerHTML = `
      <p id="alias-timer">${seconds} —Å–µ–∫—É–Ω–¥</p>
      <div id="alias-word" class="card"></div>

      <div style="display:flex; gap:10px; justify-content:center; margin-top:20px;">
        <button onclick="markGuessed(true)" class="correct-button">‚úÖ –û—Ç–≥–∞–¥–∞–Ω–æ</button>
        <button onclick="markGuessed(false)" class="wrong-button">‚ùå –ù–µ –æ—Ç–≥–∞–¥–∞–Ω–æ</button>
      </div>

      <button onclick="goToMainMenu()" class="back-button">‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
    `;

    showNextAliasWord();

    const timerEl = document.getElementById("alias-timer");

    window.aliasInterval = setInterval(() => {
      seconds--;
      timerEl.textContent = `${seconds} —Å–µ–∫—É–Ω–¥`;
      if (seconds <= 10) timerEl.style.color = "red";

      if (seconds <= 0) {
        clearInterval(window.aliasInterval);
        timerEl.textContent = "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!";
        setTimeout(() => {
          showAliasResults();
        }, 1000);
      }
    }, 1000);
  } catch (e) {
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã.");
    console.error(e);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
function showNextAliasWord() {
  const wordEl = document.getElementById("alias-word");

  if (aliasIndex >= aliasWords.length) {
    showAliasResults();
    return;
  }

  wordEl.innerHTML = `<div class="card">${aliasWords[aliasIndex]}</div>`;
  aliasIndex++;
}

// –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —É–≥–∞–¥–∞–Ω–Ω–æ–µ / –Ω–µ —É–≥–∞–¥–∞–Ω–Ω–æ–µ
function markGuessed(correct) {
  if (aliasIndex <= 0) return;

  const word = aliasWords[aliasIndex - 1];
  guessedAlias.push({ word, correct, round: currentRound });
  showNextAliasWord();
}

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, —Ä–∞–∑–±–∏—Ç—ã–µ –ø–æ —Ä–∞—É–Ω–¥–∞–º
function showAliasResults() {
  const container = document.getElementById("game-container");
  container.innerHTML = "<h2>üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h2>";

  if (guessedAlias.length === 0) {
    container.innerHTML += "<p>–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å–Ω–æ–≤–∞.</p>";
    container.innerHTML += `<button onclick="startAliasGame()" class="menu-button">üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞</button>`;
    container.innerHTML += `<button onclick="goToMainMenu()" class="back-button">‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>`;
    return;
  }

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞—É–Ω–¥–∞–º
  const roundsMap = {};
  guessedAlias.forEach(item => {
    if (!roundsMap[item.round]) roundsMap[item.round] = [];
    roundsMap[item.round].push(item);
  });

  container.innerHTML = "<h2>üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h2>";

  for (const round in roundsMap) {
    container.innerHTML += `<h3>–†–∞—É–Ω–¥ #${round}</h3><ul>`;
    roundsMap[round].forEach(item => {
      const color = item.correct ? "green" : "red";
      container.innerHTML += `<li style="color:${color};">${item.word}</li>`;
    });
    container.innerHTML += "</ul>";
  }

  // –ö–Ω–æ–ø–∫–∏ —Å –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
  container.innerHTML += `<button onclick="currentRound++; startAliasGameWithReset('${currentDifficulty}')" class="menu-button">üîÑ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥</button>`;
  container.innerHTML += `<button onclick="showAliasSetup(loadCurrentWords(), '${currentDifficulty}')" class="menu-button">üîò –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</button>`;
  container.innerHTML += `<button onclick="goToMainMenu()" class="back-button">‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>`;
}

// –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function urlForDifficulty(difficulty) {
  return {
    easy: "data/easy_bible_words.json",
    medium: "data/medium_bible_words.json",
    hard: "data/hard_bible_words.json"
  }[difficulty] || "";
}

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∏ –∏–≥—Ä—ã
async function startAliasTimer(difficulty) {
  const input = document.getElementById("timerValue").value;
  let seconds = parseInt(input);

  if (isNaN(seconds) || seconds < 1 || seconds > 60) {
    alert("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 60.");
    return;
  }

  let url = urlForDifficulty(difficulty);

  try {
    const words = await loadJSON(url);
    const unusedWords = getUnusedWords(words, guessedAlias);

    if (unusedWords.length === 0) {
      showAllWordsShownMessage();
      return;
    }

    aliasWords = shuffleArray([...unusedWords]);
    aliasIndex = 0;

    const container = document.getElementById("game-container");
    container.innerHTML = `
      <p id="alias-timer">${seconds} —Å–µ–∫—É–Ω–¥</p>
      <div id="alias-word" class="card"></div>

      <div style="display:flex; gap:10px; justify-content:center; margin-top:20px;">
        <button onclick="markGuessed(true)" class="correct-button">‚úÖ –û—Ç–≥–∞–¥–∞–Ω–æ</button>
        <button onclick="markGuessed(false)" class="wrong-button">‚ùå –ù–µ –æ—Ç–≥–∞–¥–∞–Ω–æ</button>
      </div>

      <button onclick="goToMainMenu()" class="back-button">‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
    `;

    showNextAliasWord();

    const timerEl = document.getElementById("alias-timer");

    window.aliasInterval = setInterval(() => {
      seconds--;
      timerEl.textContent = `${seconds} —Å–µ–∫—É–Ω–¥`;
      if (seconds <= 10) timerEl.style.color = "red";

      if (seconds <= 0) {
        clearInterval(window.aliasInterval);
        timerEl.textContent = "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!";
        setTimeout(() => {
          showAliasResults();
        }, 1000);
      }
    }, 1000);
  } catch (e) {
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã.");
    console.error(e);
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø–æ —Ç–µ–∫—É—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function loadCurrentWords() {
  const tempContainer = document.createElement("div");
  const words = [...document.querySelectorAll("#alias-word .card")].map(el => el.textContent.trim());
  return words;
}

// –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã
function showAllWordsShownMessage() {
  const container = document.getElementById("game-container");
  container.innerHTML = `
    <h2>‚ö†Ô∏è –í—Å–µ —Å–ª–æ–≤–∞ –ø–æ–∫–∞–∑–∞–Ω—ã!</h2>
    <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.</p>
    <button onclick="startAliasGame()" class="menu-button">üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞</button>
    <button onclick="goToMainMenu()" class="back-button">‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
  `;
}

// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
function shuffleArray(arr) {
  return [...arr].sort(() => Math.random() - 0.5);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ JSON
async function loadJSON(url) {
  const res = await fetch(url);
  if (!res.ok) throw new Error(`HTTP –æ—à–∏–±–∫–∞: ${res.status}`);
  return await res.json();
}

// –°–±—Ä–æ—Å –∏–≥—Ä—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤ –º–µ–Ω—é
function goToMainMenu() {
  if (window.aliasInterval) clearInterval(window.aliasInterval);
  aliasWords = [];
  aliasIndex = 0;
  guessedAlias = [];
  currentDifficulty = null;
  currentRound = 1;

  document.getElementById("game-container").innerHTML = "";
  document.querySelector(".menu-container").classList.remove("hidden");
}
