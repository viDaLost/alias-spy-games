// === Alias (improved) ===
// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
let aliasWords = [];        // –°–ª–æ–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ (–ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–∞—è –ø–∞—á–∫–∞)
let aliasIndex = 0;         // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞ –≤ aliasWords
let guessedAlias = [];      // –í—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: { word, correct(true/false|null), round }
let currentDifficulty = null;
let currentRound = 1;

let gameActive = false;     // –ò–¥—ë—Ç –ª–∏ —Å–µ–π—á–∞—Å —Ä–∞—É–Ω–¥
let inputLocked = false;    // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–∞–±–ª-–∫–ª–∏–∫–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É
let wordsCache = new Map(); // –ö—ç—à —Å–ª–æ–≤ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—è–º: 'easy'|'medium'|'hard' -> string[]
let abortCtrl = null;       // –î–ª—è –æ—Ç–º–µ–Ω—ã fetch –ø—Ä–∏ –±—ã—Å—Ç—Ä—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
loadState();

// –°—Ç–∞—Ä—Ç —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function startAliasGame() {
  // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∏–≥—Ä—ã (–≤–∏–∑—É–∞–ª—å–Ω–∞—è ¬´–Ω–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è¬ª)
  if (window.aliasInterval) clearInterval(window.aliasInterval);
  gameActive = false;
  inputLocked = false;

  aliasWords = [];
  aliasIndex = 0;
  guessedAlias = [];
  currentRound = 1;
  currentDifficulty = null;

  const container = document.getElementById("game-container");
  if (!container) return;

  container.innerHTML = `
    <h2>üéÆ –ê–ª–∏–∞—Å</h2>
    <p><strong>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:</strong></p>

    <div style="margin-bottom:15px;">
      <button onclick="loadAliasWords('easy')" class="menu-button">üü¢ –õ—ë–≥–∫–∏–π</button><br>
      <button onclick="loadAliasWords('medium')" class="menu-button">üü° –°—Ä–µ–¥–Ω–∏–π</button><br>
      <button onclick="loadAliasWords('hard')" class="menu-button">üî¥ –¢—è–∂—ë–ª—ã–π</button><br>
    </div>

    <button onclick="goToMainMenu()" class="back-button">‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
  `;

  // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
  const menu = document.querySelector(".menu-container");
  if (menu) menu.classList.remove("hidden");

  saveState();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤ –∏–∑ JSON –ø–æ —É—Ä–æ–≤–Ω—é —Å –∫—ç—à–µ–º
async function loadAliasWords(difficulty) {
  currentDifficulty = difficulty;
  const url = urlForDifficulty(difficulty);

  try {
    // –û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (abortCtrl) abortCtrl.abort();
    abortCtrl = new AbortController();

    if (!wordsCache.has(difficulty)) {
      const words = await loadJSON(url, abortCtrl.signal);
      wordsCache.set(difficulty, Array.isArray(words) ? words : []);
    }

    showAliasSetup(wordsCache.get(difficulty), difficulty);
    saveState();
  } catch (e) {
    alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤: ${e.message}`);
    console.error(e);
  }
}

// –≠–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º —Ä–∞—É–Ω–¥–∞
function showAliasSetup(words, difficulty) {
  const container = document.getElementById("game-container");
  if (!container) return;

  const difficultyName = getDifficultyName(difficulty);

  container.innerHTML = `
    <h2>üéÆ –ê–ª–∏–∞—Å ‚Äî ${difficultyName} —É—Ä–æ–≤–µ–Ω—å</h2>
    <p><strong>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è (1‚Äì60 —Å–µ–∫—É–Ω–¥):</strong></p>
    <input type="number" id="timerValue" min="1" max="60" value="60" class="timer-input">

    <br><br>
    <button onclick="startAliasTimer('${difficulty}')" class="start-button">‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É</button>
    <button onclick="goToMainMenu()" class="back-button">‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
  `;
}

// –ö—Ä–∞—Å–∏–≤–æ–µ –∏–º—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function getDifficultyName(difficulty) {
  return {
    easy: "–õ—ë–≥–∫–∏–π",
    medium: "–°—Ä–µ–¥–Ω–∏–π",
    hard: "–¢—è–∂—ë–ª—ã–π"
  }[difficulty] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ (–¥–ª—è ¬´–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤¬ª)
function normalize(s) { return String(s || "").trim().toLowerCase(); }

// –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ)
function getUnusedWords(allWords, guessedList) {
  const guessedSet = new Set(guessedList.map(item => normalize(item.word)));
  return allWords.filter(word => !guessedSet.has(normalize(word)));
}

// –°—Ç–∞—Ä—Ç —Ç–∞–π–º–µ—Ä–∞ –∏ –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
async function startAliasTimer(difficulty) {
  if (gameActive) return; // –∑–∞—â–∏—Ç–∏–º—Å—è –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞

  const inputEl = document.getElementById("timerValue");
  if (!inputEl) return;

  let seconds = parseInt(inputEl.value, 10);
  if (isNaN(seconds) || seconds < 1 || seconds > 60) {
    alert("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 60.");
    return;
  }

  // –ß–∏—Å—Ç–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ—Å—Ç–∞–ª—Å—è
  if (window.aliasInterval) clearInterval(window.aliasInterval);

  try {
    if (!wordsCache.has(difficulty)) {
      const url = urlForDifficulty(difficulty);
      if (abortCtrl) abortCtrl.abort();
      abortCtrl = new AbortController();
      const words = await loadJSON(url, abortCtrl.signal);
      wordsCache.set(difficulty, Array.isArray(words) ? words : []);
    }

    const allWords = wordsCache.get(difficulty);
    const unusedWords = getUnusedWords(allWords, guessedAlias);

    if (unusedWords.length === 0) {
      showAllWordsShownMessage();
      return;
    }

    aliasWords = shuffleArray(unusedWords);
    aliasIndex = 0;

    const container = document.getElementById("game-container");
    if (!container) return;

    container.innerHTML = `
      <p id="alias-timer">${seconds} —Å–µ–∫—É–Ω–¥</p>
      <div id="alias-left" style="margin-bottom:8px; font-size:0.95rem; opacity:.8;"></div>
      <div id="alias-word" class="card"></div>

      <div style="display:flex; gap:10px; justify-content:center; margin-top:20px;">
        <button onclick="markGuessed(true)" class="correct-button">‚úÖ –û—Ç–≥–∞–¥–∞–Ω–æ (Enter)</button>
        <button onclick="markGuessed(false)" class="wrong-button">‚ùå –ù–µ –æ—Ç–≥–∞–¥–∞–Ω–æ (Backspace)</button>
        <button onclick="skipWord()" class="skip-button">‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (Space)</button>
      </div>

      <button onclick="goToMainMenu()" class="back-button" style="margin-top:16px;">‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
    `;

    // –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
    showNextAliasWord();
    updateLeftCounter();

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    gameActive = true;
    inputLocked = false;

    const timerEl = document.getElementById("alias-timer");

    window.aliasInterval = setInterval(() => {
      if (!gameActive) return;

      seconds--;
      updateTimerUI(timerEl, seconds);

      if (seconds <= 0) {
        endRound(timerEl);
      }
    }, 1000);

    // –®–æ—Ä—Ç–∫–∞—Ç—ã
    addKeyHandlers();

    saveState();
  } catch (e) {
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã.");
    console.error(e);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Ç–∞–π–º–µ—Ä–∞
function updateTimerUI(timerEl, seconds) {
  if (!timerEl) return;
  timerEl.textContent = `${seconds} —Å–µ–∫—É–Ω–¥`;
  if (seconds <= 10) timerEl.style.color = "red";
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
function endRound(timerEl) {
  clearInterval(window.aliasInterval);
  window.aliasInterval = null;
  gameActive = false;
  disableAnswerButtons(true);
  if (timerEl) timerEl.textContent = "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!";
  // –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è UX
  setTimeout(showAliasResults, 300);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
function showNextAliasWord() {
  const wordEl = document.getElementById("alias-word");
  if (!wordEl) return;

  if (aliasIndex >= aliasWords.length) {
    // –ù–µ—Ç —Å–ª–æ–≤ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    gameActive = false;
    disableAnswerButtons(true);
    showAliasResults();
    return;
  }

  // –í–∞–∂–Ω–æ: –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. –ù–µ –≤—Å—Ç–∞–≤–ª—è–µ–º innerHTML —Å —á—É–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
  wordEl.textContent = aliasWords[aliasIndex];
  aliasIndex++;

  // –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–ª–∏–∫
  inputLocked = false;
  disableAnswerButtons(false);
  updateLeftCounter();
}

// –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —É–≥–∞–¥–∞–Ω–Ω–æ–µ / –Ω–µ —É–≥–∞–¥–∞–Ω–Ω–æ–µ
function markGuessed(correct) {
  if (!gameActive || inputLocked || aliasIndex <= 0) return;

  inputLocked = true;
  const word = aliasWords[aliasIndex - 1];
  guessedAlias.push({ word, correct, round: currentRound });
  saveState();

  // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞-–∞–Ω–∏–º–∞—Ü–∏—è (—á–µ—Ä–µ–∑ –∫–∞–¥—Ä) ‚Äî –∑–∞—â–∏—Ç–∏—Ç –æ—Ç –¥–∞–±–ª-–∫–ª–∏–∫–∞
  requestAnimationFrame(() => showNextAliasWord());
}

// –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ (—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –ø–æ–ø—ã—Ç–∫–∞ –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞)
function skipWord() {
  if (!gameActive || inputLocked || aliasIndex <= 0) return;

  inputLocked = true;
  const word = aliasWords[aliasIndex - 1];
  guessedAlias.push({ word, correct: null, round: currentRound });
  saveState();

  requestAnimationFrame(() => showNextAliasWord());
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: –æ—Ç–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
function disableAnswerButtons(disabled) {
  document.querySelectorAll('.correct-button, .wrong-button, .skip-button')
    .forEach(btn => { if (btn) btn.disabled = disabled; });
}

// –ü–æ–∫–∞–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–ª–æ–≤
function updateLeftCounter() {
  const leftEl = document.getElementById("alias-left");
  if (!leftEl) return;
  const left = aliasWords.length - aliasIndex;
  leftEl.textContent = `–û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤: ${left}`;
}

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ä–∞—É–Ω–¥–∞–º + –∏—Ç–æ–≥–æ
function showAliasResults() {
  const container = document.getElementById("game-container");
  if (!container) return;

  removeKeyHandlers();

  container.innerHTML = "<h2>üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h2>";

  if (guessedAlias.length === 0) {
    container.innerHTML += "<p>–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å–Ω–æ–≤–∞.</p>";
    container.innerHTML += `<button onclick="startAliasGame()" class="menu-button">üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞</button>`;
    container.innerHTML += `<button onclick="goToMainMenu()" class="back-button">‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>`;
    return;
  }

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞—É–Ω–¥–∞–º
  const roundsMap = {};
  guessedAlias.forEach(item => {
    if (!roundsMap[item.round]) roundsMap[item.round] = [];
    roundsMap[item.round].push(item);
  });

  const rounds = Object.keys(roundsMap).map(Number).sort((a, b) => a - b);

  let totalYes = 0, totalNo = 0;

  rounds.forEach(round => {
    const items = roundsMap[round];
    const yes = items.filter(x => x.correct === true).length;
    const no  = items.filter(x => x.correct === false).length;
    const skipped = items.filter(x => x.correct === null).length;

    totalYes += yes;
    totalNo  += no;

    container.innerHTML += `<h3>–†–∞—É–Ω–¥ #${round} ‚Äî ‚úÖ ${yes} / ‚ùå ${no}${skipped ? ` / ‚è≠Ô∏è ${skipped}` : ""}</h3><ul>`;
    items.forEach(item => {
      let color = item.correct === true ? "green" : (item.correct === false ? "red" : "gray");
      container.innerHTML += `<li style="color:${color};">${escapeHTML(item.word)}</li>`;
    });
    container.innerHTML += "</ul>";
  });

  container.innerHTML += `<p><strong>–ò—Ç–æ–≥–æ: ‚úÖ ${totalYes} / ‚ùå ${totalNo}</strong>${totalYes+totalNo < guessedAlias.length ? ` (‚è≠Ô∏è –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${guessedAlias.length - (totalYes+totalNo)})` : ""}</p>`;

  // –ö–Ω–æ–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  container.innerHTML += `<button onclick="currentRound++; showAliasSetupWithNewTime(currentDifficulty)" class="menu-button">üîÑ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥</button>`;
  container.innerHTML += `<button onclick="startAliasGame()" class="menu-button">üîò –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</button>`;
  container.innerHTML += `<button onclick="goToMainMenu()" class="back-button">‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>`;

  saveState();
}

// –≠–∫—Ä–∞–Ω –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ —Å —Ç–µ–º –∂–µ —É—Ä–æ–≤–Ω–µ–º
function showAliasSetupWithNewTime(difficulty) {
  if (!difficulty) {
    startAliasGame();
    return;
  }
  const container = document.getElementById("game-container");
  if (!container) return;

  const difficultyName = getDifficultyName(difficulty);

  container.innerHTML = `
    <h2>üéÆ –ê–ª–∏–∞—Å ‚Äî ${difficultyName} —É—Ä–æ–≤–µ–Ω—å</h2>
    <p><strong>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è (1‚Äì60 —Å–µ–∫—É–Ω–¥):</strong></p>
    <input type="number" id="timerValue" min="1" max="60" value="60" class="timer-input">

    <br><br>
    <button onclick="startAliasTimer('${difficulty}')" class="start-button">‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥</button>
    <button onclick="goToMainMenu()" class="back-button">‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
  `;
}

// –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã
function showAllWordsShownMessage() {
  const container = document.getElementById("game-container");
  if (!container) return;

  container.innerHTML = `
    <h2>‚ö†Ô∏è –í—Å–µ —Å–ª–æ–≤–∞ –ø–æ–∫–∞–∑–∞–Ω—ã!</h2>
    <p>–ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ.</p>
    <div style="display:flex; gap:10px; flex-wrap:wrap;">
      <button onclick="startAliasGame()" class="menu-button">üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞</button>
      <button onclick="resetGuessedAndContinue()" class="menu-button">üßπ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ</button>
      <button onclick="goToMainMenu()" class="back-button">‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</button>
    </div>
  `;
}

function resetGuessedAndContinue() {
  guessedAlias = [];
  currentRound = 1;
  saveState();
  if (currentDifficulty) {
    showAliasSetupWithNewTime(currentDifficulty);
  } else {
    startAliasGame();
  }
}

// URL —Å–ª–æ–≤–∞—Ä—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function urlForDifficulty(difficulty) {
  return {
    easy: "data/easy_bible_words.json",
    medium: "data/medium_bible_words.json",
    hard: "data/hard_bible_words.json"
  }[difficulty] || "";
}

// –ß–µ—Å—Ç–Ω–∞—è –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∞ –§–∏—à–µ—Ä–∞‚Äì–ô–µ—Ç—Å–∞
function shuffleArray(list) {
  const arr = [...list];
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON
async function loadJSON(url, signal) {
  if (!url) throw new Error("–ü—É—Å—Ç–æ–π URL —Å–ª–æ–≤–∞—Ä—è");
  const res = await fetch(url, { cache: "no-store", signal });
  if (!res.ok) throw new Error(`HTTP –æ—à–∏–±–∫–∞: ${res.status}`);
  return await res.json();
}

// –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function goToMainMenu() {
  if (window.aliasInterval) clearInterval(window.aliasInterval);
  window.aliasInterval = null;
  gameActive = false;
  inputLocked = false;

  aliasWords = [];
  aliasIndex = 0;
  guessedAlias = [];
  currentRound = 1;
  currentDifficulty = null;

  const container = document.getElementById("game-container");
  if (container) container.innerHTML = "";

  const menu = document.querySelector(".menu-container");
  if (menu) menu.classList.remove("hidden");

  saveState();
}

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–∏ ===

// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ innerHTML (–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö)
function escapeHTML(str) {
  return String(str)
    .replaceAll("&", "&amp;")
    .replaceAll("<", "&lt;")
    .replaceAll(">", "&gt;")
    .replaceAll('"', "&quot;")
    .replaceAll("'", "&#39;");
}

// –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
function saveState() {
  try {
    localStorage.setItem("alias_state", JSON.stringify({
      guessedAlias, currentRound, currentDifficulty
    }));
  } catch {}
}

function loadState() {
  try {
    const s = JSON.parse(localStorage.getItem("alias_state"));
    if (s) {
      guessedAlias = Array.isArray(s.guessedAlias) ? s.guessedAlias : [];
      currentRound = Number.isInteger(s.currentRound) ? s.currentRound : 1;
      currentDifficulty = s.currentDifficulty || null;
    }
  } catch {}
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —à–æ—Ä—Ç–∫–∞—Ç—ã: Enter=–≤–µ—Ä–Ω–æ, Backspace=–Ω–µ–≤–µ—Ä–Ω–æ, Space=–ø—Ä–æ–ø—É—Å–∫
function onKeyDownHandler(e) {
  if (!gameActive) return;
  // –ß—Ç–æ–±—ã Space –Ω–µ —Å–∫—Ä–æ–ª–ª–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É
  if (e.code === "Space") e.preventDefault();

  switch (e.code) {
    case "Enter":
      markGuessed(true);
      break;
    case "Backspace":
      markGuessed(false);
      break;
    case "Space":
      skipWord();
      break;
  }
}

function addKeyHandlers() {
  removeKeyHandlers();
  window.addEventListener("keydown", onKeyDownHandler, { passive: false });
}

function removeKeyHandlers() {
  window.removeEventListener("keydown", onKeyDownHandler, { passive: false });
}
